Short manual of ListCriticalPfreeGraphs
-----------------------------------

Author: Jan Goedgebeur (jan.goedgebeur@ugent.be)
In collaboration with: Maria Chudnovsky, Oliver Schaudt and Mingxian Zhong

Tripodgenerator is a generator for list 4-critical Pt-free graphs.

This program has been tested on Linux and Mac OS X.


Installation
------------

The latest version of ListCriticalPfreeGraphs can be obtained from http://caagt.ugent.be/listcriticalpfree/

Compile the program using the command: cc -DWORDSIZE=32 -DMAXN=WORDSIZE -O4 list_critical_Pfree_graphs.c nautyW1.a -o list_critical_Pfree_graphs


Usage
-----
An overview of all options can also be found by executing "./list_critical_Pfree_graphs -h".


Usage: ./list_critical_Pfree_graphs <number_of_vertices> c<x> P<x> [options]
At least the number of vertices, c<x> and P<x> must be specified.

Valid options are:
  c<x>: Searches for <x>-critical graphs (i.e. graphs which are NOT <x>-colourable).
  P<x>: Searches for P<x>-free graphs (i.e. graphs which do not contain P<x> as induced subgraph).
  C<x>: Searches for C<x>-free graphs (i.e. graphs which do not contain C<x> as induced subgraph).
  diamondfree: Searches for diamond-free graphs.
  bipartite: Searches for bipartite graphs.
  g<x>: Searches for graphs with girth at least <x>.
  vertexcritical: Output vertex-critical instead of critical graphs.
  mod <rest> <modulo>: Splits the generation in <modulo> (more or less equally big) parts. Here part <rest> will be executed.


The generated graphs are written to stdout and are encoded in multicode format (see Appendix A).


Don't hesitate to contact me at jan.goedgebeur@ugent.be if you have any further questions or suggestions.


Changelog
---------

2016-07-18: First release.


Appendix A: definition of the multicode format
----------------------------------------------
This code is binary. The first entry is the number of vertices.
Vertices are numbered 1,...,n. For each vertex x there is a list of
neighbours with higher labels than x, followed by a zero.
The last list is always empty (there are no neighbours of n with a higher number than n),
therefore the last "list" is not followed by a zero.
After the last byte the next graph follows.

The codelength of a graph in multicode is number of vertices + number of edges.

More information about this format + a program to translate multicode to adjacency lists can be found at: http://hog.grinvin.org/Formats.action#multicode


